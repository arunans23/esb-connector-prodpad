<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~   WSO2 Inc. licenses this file to you under the Apache License,
  ~   Version 2.0 (the "License"); you may not use this file except
  ~   in compliance with the License.
  ~   You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  -->
<!-- API Doc: https://www.prodpad.com/api/post-ideas -->
<template name="createIdea" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="description" description="The description of the idea." />
   <parameter name="title" description="The title of the idea." />
   <parameter name="creatorId" description="The creator Id of the idea." />
   <parameter name="businessCaseProblem" description="The business case problem of the idea." />
   <parameter name="businessCaseValue" description="The business case answer of the idea." />
   <parameter name="functional" description="The functional spec of the idea." />
   <parameter name="notes" description="The notes on the idea." />
   <parameter name="userStories" description="The user stories of the idea." />
   <parameter name="comments" description="The comments of the idea." />
   <parameter name="productIds" description="The product Ids associated with the idea." />
   <parameter name="personaIds" description="The personas of the idea." />
   <parameter name="tagIds" description="The tags for the idea." />
   <parameter name="statusId" description="The status Id of the idea." />
   <parameter name="externalLinks" description="The external links of the idea." />
   <sequence>
      <property name="uri.var.description" expression="$func:description" />
      <property name="uri.var.title" expression="$func:title" />
      <property name="uri.var.creatorId" expression="$func:creatorId" />
      <property name="uri.var.businessCaseProblem" expression="$func:businessCaseProblem" />
      <property name="uri.var.businessCaseValue" expression="$func:businessCaseValue" />
      <property name="uri.var.functional" expression="$func:functional" />
      <property name="uri.var.notes" expression="$func:notes" />
      <property name="uri.var.userStories" expression="$func:userStories" />
      <property name="uri.var.comments" expression="$func:comments" />
      <property name="uri.var.productIds" expression="$func:productIds" />
      <property name="uri.var.personaIds" expression="$func:personaIds" />
      <property name="uri.var.tagIds" expression="$func:tagIds" />
      <property name="uri.var.statusId" expression="$func:statusId" />
      <property name="uri.var.externalLinks" expression="$func:externalLinks" />
      <script language="js">
      <![CDATA[
         var payload = {};
         var description = mc.getProperty('uri.var.description');
         var title = mc.getProperty('uri.var.title');
         var creatorId = mc.getProperty('uri.var.creatorId');
         var businessCaseProblem = mc.getProperty('uri.var.businessCaseProblem');
         var businessCaseValue = mc.getProperty('uri.var.businessCaseValue');
         var functional = mc.getProperty('uri.var.functional');
         var notes = mc.getProperty('uri.var.notes');
         var userStories = mc.getProperty('uri.var.userStories');
         var comments = mc.getProperty('uri.var.comments');
         var productIds = mc.getProperty('uri.var.productIds');
         var personaIds = mc.getProperty('uri.var.personaIds');
         var tagIds = mc.getProperty('uri.var.tagIds');
         var statusId = mc.getProperty('uri.var.statusId');
         var externalLinks = mc.getProperty('uri.var.externalLinks');
         if (description != null && description != "") {
            payload.description = description;
         }
         if (title != null && title != "") {
            payload.title = title;
         }
         if (creatorId != null && creatorId != "") {
            payload.creator = {}; 
            payload.creator.id = creatorId;
         }
         if (businessCaseProblem != null && businessCaseProblem != "") {
            payload.business_case = {};
            payload.business_case.problem = businessCaseProblem;
         }
         if (businessCaseValue != null && businessCaseValue != "") {
            if (businessCaseProblem != null && businessCaseProblem != "") {
               payload.business_case.value = businessCaseValue;
            } else {
               payload.business_case = {};
               payload.business_case.value = businessCaseValue;
            }
         }
         if (functional != null && functional != "") {
            payload.functional = functional;
         }
         if (notes != null && notes != "") {
            payload.notes = notes;
         }
         if (userStories != null && userStories != "") {
            payload.user_stories = eval("("+userStories+")");
         }
         if (comments != null && comments != "") {
            payload.comments = eval("("+comments+")");
         }
         if (productIds != null && productIds != "") {
            var productIdsArray = eval("(" + productIds + ")");
            var productsArray = [];
            for(var i=0; i < productIdsArray.length;i++) {
               var productObject = {};
               productObject.id = productIdsArray[i];
               productsArray.push(productObject);
            }
            payload.products = productsArray;
         }
         if (personaIds != null && personaIds != "") {
            var personaIdsArray = eval("(" + personaIds + ")");
            var personasArray = [];
            for(var i=0; i < personaIdsArray.length;i++) {
               var personaObject = {};
               personaObject.id = personaIdsArray[i];
               personasArray.push(personaObject);
            }
            payload.personas = personasArray;
         }
         if (tagIds != null && tagIds != "") {
            var tagIdsArray = eval("(" + tagIds + ")");
            var tagsArray = [];
            for(var i=0; i < tagIdsArray.length;i++) {
               var tagObject = {};
               tagObject.id = tagIdsArray[i];
               tagsArray.push(tagObject);
            }
            payload.tags = tagsArray;
         }
         if (statusId != null && statusId != "") {
            payload.status = {};
            payload.status.id = statusId;
         }
         if (externalLinks != null && externalLinks != "") {
            payload.external_links = eval("("+externalLinks+")");
         }
          mc.setPayloadJSON(payload);
      ]]>
      </script>
      <property name="DISABLE_CHUNKING" value="true" scope="axis2"/>
      <call>
         <endpoint>
            <http method="post" uri-template="legacy-encoding:{uri.var.apiUrl}/ideas{uri.var.apiKey}" />
         </endpoint>
      </call>
      <!--Removing custom headers from the Response. -->
      <header name="Strict-Transport-Security" action="remove" scope="transport" />
      <header name="Access-Control-Allow-Headers" action="remove" scope="transport" />
      <header name="Access-Control-Allow-Origin" action="remove" scope="transport" />
      <header name="Expires" action="remove" scope="transport" />
      <header name="Set-Cookie" action="remove" scope="transport" />
      <header name="Access-Control-Allow-Methods" action="remove" scope="transport" />
      <header name="X-Powered-By" action="remove" scope="transport" />
      <header name="Pragma" action="remove" scope="transport" />
   </sequence>
</template>